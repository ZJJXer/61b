[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 5-6 Basic Array Syntax.mp4
Video File: 5-6 Basic Array Syntax.mp4
Video AR Value: 1.844380
Video Zoom Percent: 0.750000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H00002EFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: zh - 黄色,微软雅黑,60,&H0076F1FF,&H00002EFF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H00002EFF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H0085DFFF,&H00002EFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H0085DFFF,&H00002EFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:02.20,0:00:06.56,en - 白色,,0,0,0,,Now, like classes, arrays are going to be almost always instantiated using the new keyword.
Dialogue: 0,0:00:02.20,0:00:06.56,zh - 黄色,,0,0,0,,与类相似，数组总是使用 new 关键字实例化
Dialogue: 0,0:00:06.88,0:00:09.28,en - 白色,,0,0,0,,So for strings, we saw you don't have to use new.
Dialogue: 0,0:00:06.88,0:00:09.28,zh - 黄色,,0,0,0,,而字符串不必使用 new
Dialogue: 0,0:00:09.99,0:00:13.04,en - 白色,,0,0,0,,With arrays, it's going to be new most of the time.
Dialogue: 0,0:00:09.99,0:00:13.04,zh - 黄色,,0,0,0,,数组大部分时间都使用 new
Dialogue: 0,0:00:13.93,0:00:16.85,en - 白色,,0,0,0,,So there's three notations for defining arrays in Java.
Dialogue: 0,0:00:13.93,0:00:16.85,zh - 黄色,,0,0,0,,在 Java 中有三种定义数组的记号
Dialogue: 0,0:00:17.56,0:00:21.18,en - 白色,,0,0,0,,And the first tier is just a simple creation of an array,
Dialogue: 0,0:00:17.56,0:00:21.18,zh - 黄色,,0,0,0,,第一层只是简单地创建一个数组
Dialogue: 0,0:00:21.18,0:00:23.34,en - 白色,,0,0,0,,but not specifying the values that go in an array.
Dialogue: 0,0:00:21.18,0:00:23.34,zh - 黄色,,0,0,0,,但不指定数组中的值
Dialogue: 0,0:00:24.01,0:00:28.37,en - 白色,,0,0,0,,So this first syntax says the variable y, which I'm assuming has been declared earlier,
Dialogue: 0,0:00:24.01,0:00:28.37,zh - 黄色,,0,0,0,,第一种语法表示，变量 y，假设已经声明过了
Dialogue: 0,0:00:29.20,0:00:33.18,en - 白色,,0,0,0,,I want to put in that 64-bit box the address of an array I'm now creating.
Dialogue: 0,0:00:29.20,0:00:33.18,zh - 黄色,,0,0,0,,我将创建的数组地址放入64位盒子中
Dialogue: 0,0:00:33.60,0:00:36.87,en - 白色,,0,0,0,,That array will consist of three boxes of 32 bits each,
Dialogue: 0,0:00:33.60,0:00:36.87,zh - 黄色,,0,0,0,,该数组由三个盒子组成，每个盒子32位
Dialogue: 0,0:00:36.87,0:00:38.67,en - 白色,,0,0,0,,along with a length, three.
Dialogue: 0,0:00:36.87,0:00:38.67,zh - 黄色,,0,0,0,,还有一个长度3
Dialogue: 0,0:00:39.38,0:00:41.01,en - 白色,,0,0,0,,And Java, when you create an array,
Dialogue: 0,0:00:39.38,0:00:41.01,zh - 黄色,,0,0,0,,Java 中当你创建数组时
Dialogue: 0,0:00:41.01,0:00:42.18,en - 白色,,0,0,0,,it will get a default value.
Dialogue: 0,0:00:41.01,0:00:42.18,zh - 黄色,,0,0,0,,它将获得默认值
Dialogue: 0,0:00:42.64,0:00:45.29,en - 白色,,0,0,0,,And we'll see in the visualization what that means exactly.
Dialogue: 0,0:00:42.64,0:00:45.29,zh - 黄色,,0,0,0,,我们将在可视化中看到这到底意味着什么
Dialogue: 0,0:00:46.08,0:00:49.11,en - 白色,,0,0,0,,In the other kind of notation-- or sorry, the second type of notation
Dialogue: 0,0:00:46.08,0:00:49.11,zh - 黄色,,0,0,0,,第二种记号中
Dialogue: 0,0:00:49.49,0:00:55.68,en - 白色,,0,0,0,,is to say x equals new int and then here have the actual values you want to put in there by default.
Dialogue: 0,0:00:49.49,0:00:55.68,zh - 黄色,,0,0,0,,x = new int，这里默认有你想放的实际数值
Dialogue: 0,0:00:56.34,0:00:59.64,en - 白色,,0,0,0,,So in this case, we're not explicitly stating the size of the array, but Java's able.
Dialogue: 0,0:00:56.34,0:00:59.64,zh - 黄色,,0,0,0,,在这种情况下，我们没有明确说明数组的大小，但 Java...
Dialogue: 0,0:00:59.64,0:01:01.06,en - 白色,,0,0,0,,It's pretty smart, figures it out.
Dialogue: 0,0:00:59.64,0:01:01.06,zh - 黄色,,0,0,0,,它很聪明，算出来了
Dialogue: 0,0:01:01.06,0:01:02.91,en - 白色,,0,0,0,,It says, ah, you want an array of size five,
Dialogue: 0,0:01:01.06,0:01:02.91,zh - 黄色,,0,0,0,,它知道你想要一个大小为5的数组
Dialogue: 0,0:01:02.91,0:01:06.68,en - 白色,,0,0,0,,and it puts these values in instead of the default value.
Dialogue: 0,0:01:02.91,0:01:06.68,zh - 黄色,,0,0,0,,它会将这些值放入，而不是默认赋值
Dialogue: 0,0:01:07.62,0:01:09.33,en - 白色,,0,0,0,,Now, note that when you create an array in Java,
Dialogue: 0,0:01:07.62,0:01:09.33,zh - 黄色,,0,0,0,,现在请注意，当你在 Java 中创建数组时
Dialogue: 0,0:01:09.33,0:01:11.11,en - 白色,,0,0,0,,you always get a default value.
Dialogue: 0,0:01:09.33,0:01:11.11,zh - 黄色,,0,0,0,,你始终会获得默认值
Dialogue: 0,0:01:11.37,0:01:15.63,en - 白色,,0,0,0,,So if you say new int one million, it's going to set aside a million boxes,
Dialogue: 0,0:01:11.37,0:01:15.63,zh - 黄色,,0,0,0,,如果 new int 一百万，它会留出一百万个盒子
Dialogue: 0,0:01:15.63,0:01:18.04,en - 白色,,0,0,0,,and it's going to write a bunch of zeros if it's all ints.
Dialogue: 0,0:01:15.63,0:01:18.04,zh - 黄色,,0,0,0,,如果是整数数组会全写入0
Dialogue: 0,0:01:20.43,0:01:23.92,en - 白色,,0,0,0,,So there's a little bit of overhead associated with creating arrays in Java.
Dialogue: 0,0:01:20.43,0:01:23.92,zh - 黄色,,0,0,0,,因此在 Java 中创建数组会带来一些开销
Dialogue: 0,0:01:24.74,0:01:29.61,en - 白色,,0,0,0,,All right, so next up, we have our final and somewhat strange syntax.
Dialogue: 0,0:01:24.74,0:01:29.61,zh - 黄色,,0,0,0,,接下来，我们看最后一个有点奇怪的语法
Dialogue: 0,0:01:29.91,0:01:31.86,en - 白色,,0,0,0,,This one is just like the one above,
Dialogue: 0,0:01:29.91,0:01:31.86,zh - 黄色,,0,0,0,,这个和上面的一样
Dialogue: 0,0:01:32.31,0:01:33.53,en - 白色,,0,0,0,,except we don't do new int.
Dialogue: 0,0:01:32.31,0:01:33.53,zh - 黄色,,0,0,0,,只不过不用 new int
Dialogue: 0,0:01:33.98,0:01:38.64,en - 白色,,0,0,0,,And what's sort of funny about this is it only works when you're also declaring a variable at the same time.
Dialogue: 0,0:01:33.98,0:01:38.64,zh - 黄色,,0,0,0,,有趣的是，只有当你同时声明了一个变量，它才会起作用
Dialogue: 0,0:01:39.19,0:01:41.04,en - 白色,,0,0,0,,So if I say int bracket w,
Dialogue: 0,0:01:39.19,0:01:41.04,zh - 黄色,,0,0,0,,所以 int[] w
Dialogue: 0,0:01:41.46,0:01:45.65,en - 白色,,0,0,0,,that allows me, because I'm declaring right now, to instantiate without the new int keyword.
Dialogue: 0,0:01:41.46,0:01:45.65,zh - 黄色,,0,0,0,,这是允许的，因为我正在声明，在没有 new int 的情况下进行实例化
Dialogue: 0,0:01:46.04,0:01:46.69,en - 白色,,0,0,0,,Why is it this way?
Dialogue: 0,0:01:46.04,0:01:46.69,zh - 黄色,,0,0,0,,为什么？
Dialogue: 0,0:01:46.69,0:01:48.62,en - 白色,,0,0,0,,I don't know, but that's the thing to do.
Dialogue: 0,0:01:46.69,0:01:48.62,zh - 黄色,,0,0,0,,我不知道，但就是这样
Dialogue: 0,0:01:48.85,0:01:53.84,en - 白色,,0,0,0,,So if you like this notation, be aware that you can't use it with an already declared variable.
Dialogue: 0,0:01:48.85,0:01:53.84,zh - 黄色,,0,0,0,,如果你喜欢这种表示法，注意不能将其与已声明的变量一起使用
Dialogue: 0,0:01:54.33,0:01:58.46,en - 白色,,0,0,0,,So each of these notations, they all do the same thing.
Dialogue: 0,0:01:54.33,0:01:58.46,zh - 黄色,,0,0,0,,每种记号都在做相同的事
Dialogue: 0,0:01:58.93,0:02:01.69,en - 白色,,0,0,0,,They create an array which has some length
Dialogue: 0,0:01:58.93,0:02:01.69,zh - 黄色,,0,0,0,,它们创建一个具有一定长度的数组
Dialogue: 0,0:02:01.69,0:02:03.95,en - 白色,,0,0,0,,and it has N boxes, where N is the length.
Dialogue: 0,0:02:01.69,0:02:03.95,zh - 黄色,,0,0,0,,它有 N 个盒子，其中 N 是长度
Dialogue: 0,0:02:05.04,0:02:07.37,en - 白色,,0,0,0,,For those of you curious about what's happening under the hood,
Dialogue: 0,0:02:05.04,0:02:07.37,zh - 黄色,,0,0,0,,如果你好奇内部的原理
Dialogue: 0,0:02:07.61,0:02:09.31,en - 白色,,0,0,0,,you might imagine that an array is,
Dialogue: 0,0:02:07.61,0:02:09.31,zh - 黄色,,0,0,0,,可以想象一个数组是
Dialogue: 0,0:02:09.41,0:02:17.14,en - 白色,,0,0,0,,well, maybe it's 32 bits for the length plus k bits per box, for a total of 32 plus k times N bits for an array.
Dialogue: 0,0:02:09.41,0:02:17.14,zh - 黄色,,0,0,0,,长度32位加每个盒子 k 位，每个数组总共 (32+k×N) 位
Dialogue: 0,0:02:17.52,0:02:19.63,en - 白色,,0,0,0,,But it turns out that in typical implementations,
Dialogue: 0,0:02:17.52,0:02:19.63,zh - 黄色,,0,0,0,,但事实证明，在典型的实现中
Dialogue: 0,0:02:19.63,0:02:20.80,en - 白色,,0,0,0,,it's actually a little more.
Dialogue: 0,0:02:19.63,0:02:20.80,zh - 黄色,,0,0,0,,会多一点
Dialogue: 0,0:02:20.80,0:02:22.32,en - 白色,,0,0,0,,I have a little note in the bottom right corner,
Dialogue: 0,0:02:20.80,0:02:22.32,zh - 黄色,,0,0,0,,右下角有一个小笔记
Dialogue: 0,0:02:22.32,0:02:24.02,en - 白色,,0,0,0,,and there's some reading in our optional textbook
Dialogue: 0,0:02:22.32,0:02:24.02,zh - 黄色,,0,0,0,,选修教材里有一些阅读材料
Dialogue: 0,0:02:24.02,0:02:26.65,en - 白色,,0,0,0,,if you're curious, but not important for 61B.
Dialogue: 0,0:02:24.02,0:02:26.65,zh - 黄色,,0,0,0,,好奇可以看看，但对61B 来说并不重要
Dialogue: 0,0:02:28.59,0:02:29.77,en - 白色,,0,0,0,,So let's work through an example.
Dialogue: 0,0:02:28.59,0:02:29.77,zh - 黄色,,0,0,0,,看一个例子
Dialogue: 0,0:02:30.57,0:02:34.64,en - 白色,,0,0,0,,So this is an example where I think that you, given what you saw in project zero and in this lecture, 
Dialogue: 0,0:02:30.57,0:02:34.64,zh - 黄色,,0,0,0,,这个例子，鉴于你在项目0和本节课中学到的
Dialogue: 0,0:02:34.64,0:02:35.97,en - 白色,,0,0,0,,you could do every step of this
Dialogue: 0,0:02:34.64,0:02:35.97,zh - 黄色,,0,0,0,,你可以完成每一步
Dialogue: 0,0:02:35.97,0:02:39.99,en - 白色,,0,0,0,,and draw a nice box and pointer diagram, except maybe this last step here.
Dialogue: 0,0:02:35.97,0:02:39.99,zh - 黄色,,0,0,0,,画一个漂亮的盒子指针图，也许除了这里的最后一步
Dialogue: 0,0:02:40.79,0:02:42.53,en - 白色,,0,0,0,,So let's run through this example.
Dialogue: 0,0:02:40.79,0:02:42.53,zh - 黄色,,0,0,0,,让我们来看一下这个例子
Dialogue: 0,0:02:43.79,0:02:46.24,en - 白色,,0,0,0,,And you can follow along and try and guess what's going to happen.
Dialogue: 0,0:02:43.79,0:02:46.24,zh - 黄色,,0,0,0,,试着猜猜会发生什么
Dialogue: 0,0:02:46.53,0:02:47.65,en - 白色,,0,0,0,,Now, I'm going to get two options.
Dialogue: 0,0:02:46.53,0:02:47.65,zh - 黄色,,0,0,0,,现在我有两个选项
Dialogue: 0,0:02:47.97,0:02:51.05,en - 白色,,0,0,0,,I want this so that things look nice and we don't get weird--
Dialogue: 0,0:02:47.97,0:02:51.05,zh - 黄色,,0,0,0,,选择这个会比较好看一点，不会感到奇怪
Dialogue: 0,0:02:51.96,0:02:52.88,en - 白色,,0,0,0,,we did this last time.
Dialogue: 0,0:02:51.96,0:02:52.88,zh - 黄色,,0,0,0,,上次就这么做了
Dialogue: 0,0:02:52.88,0:02:55.27,en - 白色,,0,0,0,,So make sure that it looks more like a box and pointer diagram.
Dialogue: 0,0:02:52.88,0:02:55.27,zh - 黄色,,0,0,0,,为了确保它看起来更像是盒子指针图
Dialogue: 0,0:02:55.52,0:03:00.78,en - 白色,,0,0,0,,I'm also going to enable this option so that strings show their true nature.
Dialogue: 0,0:02:55.52,0:03:00.78,zh - 黄色,,0,0,0,,我还将启用此选项，以便字符串显示其真实性质
Dialogue: 0,0:03:04.01,0:03:05.53,en - 白色,,0,0,0,,So if you're curious what these do,
Dialogue: 0,0:03:04.01,0:03:05.53,zh - 黄色,,0,0,0,,如果你好奇这些的作用
Dialogue: 0,0:03:05.73,0:03:07.83,en - 白色,,0,0,0,,you can take them away and see what's different, but whatever.
Dialogue: 0,0:03:05.73,0:03:07.83,zh - 黄色,,0,0,0,,你可以取消选择，看看有什么不同
Dialogue: 0,0:03:07.83,0:03:09.72,en - 白色,,0,0,0,,This is just so that the diagram it generates
Dialogue: 0,0:03:07.83,0:03:09.72,zh - 黄色,,0,0,0,,这只是为了使它生成的图
Dialogue: 0,0:03:09.72,0:03:11.83,en - 白色,,0,0,0,,is consistent with our box and pointer notation.
Dialogue: 0,0:03:09.72,0:03:11.83,zh - 黄色,,0,0,0,,与我们的盒子指针符号一致
Dialogue: 0,0:03:13.29,0:03:14.54,en - 白色,,0,0,0,,So the code begins.
Dialogue: 0,0:03:13.29,0:03:14.54,zh - 黄色,,0,0,0,,代码开始了
Dialogue: 0,0:03:14.96,0:03:15.75,en - 白色,,0,0,0,,Int bracket z.
Dialogue: 0,0:03:14.96,0:03:15.75,zh - 黄色,,0,0,0,,int[] z
Dialogue: 0,0:03:15.75,0:03:16.57,en - 白色,,0,0,0,,What does that do?
Dialogue: 0,0:03:15.75,0:03:16.57,zh - 黄色,,0,0,0,,那是做什么的？
Dialogue: 0,0:03:16.57,0:03:18.76,en - 白色,,0,0,0,,Well, that's going to create a box of how many bits?
Dialogue: 0,0:03:16.57,0:03:18.76,zh - 黄色,,0,0,0,,这将创建一个多少位的盒子？
Dialogue: 0,0:03:19.95,0:03:20.76,en - 白色,,0,0,0,,64.
Dialogue: 0,0:03:19.95,0:03:20.76,zh - 黄色,,0,0,0,,64
Dialogue: 0,0:03:20.94,0:03:21.72,en - 白色,,0,0,0,,And what goes in there?
Dialogue: 0,0:03:20.94,0:03:21.72,zh - 黄色,,0,0,0,,里面装的是什么？
Dialogue: 0,0:03:21.72,0:03:22.80,en - 白色,,0,0,0,,An address.
Dialogue: 0,0:03:21.72,0:03:22.80,zh - 黄色,,0,0,0,,一个地址
Dialogue: 0,0:03:23.17,0:03:26.02,en - 白色,,0,0,0,,Remember, there are only nine things in Java, types.
Dialogue: 0,0:03:23.17,0:03:26.02,zh - 黄色,,0,0,0,,请记住 Java 中只有九种类型
Dialogue: 0,0:03:26.25,0:03:29.49,en - 白色,,0,0,0,,There are the eight primitive types and then references to anything.
Dialogue: 0,0:03:26.25,0:03:29.49,zh - 黄色,,0,0,0,,八种基本类型，和对任何内容的引用
Dialogue: 0,0:03:29.49,0:03:31.39,en - 白色,,0,0,0,,This is a reference to an int array.
Dialogue: 0,0:03:29.49,0:03:31.39,zh - 黄色,,0,0,0,,这是对整型数组的引用
Dialogue: 0,0:03:31.83,0:03:33.16,en - 白色,,0,0,0,,So you get 64 bits,
Dialogue: 0,0:03:31.83,0:03:33.16,zh - 黄色,,0,0,0,,所以得到64位
Dialogue: 0,0:03:33.39,0:03:37.57,en - 白色,,0,0,0,,and into that array, we write a bunch of zeros, which we call null for short.
Dialogue: 0,0:03:33.39,0:03:37.57,zh - 黄色,,0,0,0,,在该数组中，我们写入一串0，简称为 null
Dialogue: 0,0:03:37.85,0:03:39.99,en - 白色,,0,0,0,,So we have 64 bits here, all zeros.
Dialogue: 0,0:03:37.85,0:03:39.99,zh - 黄色,,0,0,0,,所以这里有64位，全是0
Dialogue: 0,0:03:40.86,0:03:46.38,en - 白色,,0,0,0,,Now in the visualizer, we also, at this point, get two more boxes, x and y, which will be 64 bits.
Dialogue: 0,0:03:40.86,0:03:46.38,zh - 黄色,,0,0,0,,在 visualizer 中，我们此时得到两个64位的盒子，x 和 y
Dialogue: 0,0:03:46.56,0:03:49.98,en - 白色,,0,0,0,,But the visualizer, as designed by Philip Guo, does not show those boxes.
Dialogue: 0,0:03:46.56,0:03:49.98,zh - 黄色,,0,0,0,,但是 Philip Guo 设计的 visualizer 并没有显示这些盒子
Dialogue: 0,0:03:49.98,0:03:51.47,en - 白色,,0,0,0,,But you can imagine they're there.
Dialogue: 0,0:03:49.98,0:03:51.47,zh - 黄色,,0,0,0,,你可以想象它们在那里
Dialogue: 0,0:03:52.53,0:03:53.80,en - 白色,,0,0,0,,So we do x equals new int.
Dialogue: 0,0:03:52.53,0:03:53.80,zh - 黄色,,0,0,0,,执行 x = new int
Dialogue: 0,0:03:54.06,0:03:58.02,en - 白色,,0,0,0,,We get our 64-bit box x, and we fill it with 64 bits.
Dialogue: 0,0:03:54.06,0:03:58.02,zh - 黄色,,0,0,0,,我们得到64位盒子 x，并用64位填充它
Dialogue: 0,0:03:58.58,0:03:59.58,en - 白色,,0,0,0,,What goes in those bits?
Dialogue: 0,0:03:58.58,0:03:59.58,zh - 黄色,,0,0,0,,填充的什么呢？
Dialogue: 0,0:03:59.58,0:04:02.10,en - 白色,,0,0,0,,Why, the address, as returned by the new function.
Dialogue: 0,0:03:59.58,0:04:02.10,zh - 黄色,,0,0,0,,是 new 功能返回的地址
Dialogue: 0,0:04:02.82,0:04:03.93,en - 白色,,0,0,0,,What does the new function do?
Dialogue: 0,0:04:02.82,0:04:03.93,zh - 黄色,,0,0,0,,new 有什么作用？
Dialogue: 0,0:04:04.33,0:04:07.78,en - 白色,,0,0,0,,Well, it's going to go find someplace in memory for five integers to live.
Dialogue: 0,0:04:04.33,0:04:07.78,zh - 黄色,,0,0,0,,它会在内存中找个地方存放五个整数
Dialogue: 0,0:04:08.24,0:04:08.79,en - 白色,,0,0,0,,Here they are.
Dialogue: 0,0:04:08.24,0:04:08.79,zh - 黄色,,0,0,0,,它们在这
Dialogue: 0,0:04:09.59,0:04:11.36,en - 白色,,0,0,0,,So 32 bits for each one.
Dialogue: 0,0:04:09.59,0:04:11.36,zh - 黄色,,0,0,0,,每个32位
Dialogue: 0,0:04:12.15,0:04:15.79,en - 白色,,0,0,0,,And x is going to record the location in memory of this whole box.
Dialogue: 0,0:04:12.15,0:04:15.79,zh - 黄色,,0,0,0,,x 将记录整个盒子在内存中的位置
Dialogue: 0,0:04:16.41,0:04:22.25,en - 白色,,0,0,0,,Now, notice that the visualizer does not explicitly show the integer that stores the length of an array,
Dialogue: 0,0:04:16.41,0:04:22.25,zh - 黄色,,0,0,0,,注意 visualizer 并没有明确显示存储数组长度的整数
Dialogue: 0,0:04:22.25,0:04:25.70,en - 白色,,0,0,0,,though it does, nonetheless, exist, at least in a typical implementation of Java.
Dialogue: 0,0:04:22.25,0:04:25.70,zh - 黄色,,0,0,0,,尽管它在 Java 的典型实现中确实存在
Dialogue: 0,0:04:26.16,0:04:27.75,en - 白色,,0,0,0,,So you can imagine there's a little five up here,
Dialogue: 0,0:04:26.16,0:04:27.75,zh - 黄色,,0,0,0,,你可以想象上面有个5
Dialogue: 0,0:04:27.75,0:04:29.25,en - 白色,,0,0,0,,but not shown.
Dialogue: 0,0:04:27.75,0:04:29.25,zh - 黄色,,0,0,0,,但没显示
Dialogue: 0,0:04:30.23,0:04:32.26,en - 白色,,0,0,0,,Now, when I say y equals x, what does this do?
Dialogue: 0,0:04:30.23,0:04:32.26,zh - 黄色,,0,0,0,, y = x 是做什么的？
Dialogue: 0,0:04:32.52,0:04:34.90,en - 白色,,0,0,0,,We have this box over here that has 64 bits in it.
Dialogue: 0,0:04:32.52,0:04:34.90,zh - 黄色,,0,0,0,,在这有个64位的盒子
Dialogue: 0,0:04:35.17,0:04:37.84,en - 白色,,0,0,0,,And of course, the thing you do whenever you say y equals x is what?
Dialogue: 0,0:04:35.17,0:04:37.84,zh - 黄色,,0,0,0,,y = x 时，做的事情是什么？
Dialogue: 0,0:04:38.55,0:04:39.61,en - 白色,,0,0,0,,Copy the bits.
Dialogue: 0,0:04:38.55,0:04:39.61,zh - 黄色,,0,0,0,,复制位
Dialogue: 0,0:04:40.50,0:04:41.59,en - 白色,,0,0,0,,Nothing else.
Dialogue: 0,0:04:40.50,0:04:41.59,zh - 黄色,,0,0,0,,没别的了
Dialogue: 0,0:04:42.36,0:04:46.92,en - 白色,,0,0,0,,So when we copy the bits, well, our visual metaphor says we should draw an arrow to the same object,
Dialogue: 0,0:04:42.36,0:04:46.92,zh - 黄色,,0,0,0,,当我们复制位时，视觉上应该画一个箭头指向同一个对象
Dialogue: 0,0:04:47.13,0:04:47.92,en - 白色,,0,0,0,,and there you have it.
Dialogue: 0,0:04:47.13,0:04:47.92,zh - 黄色,,0,0,0,,现在已经有了
Dialogue: 0,0:04:48.99,0:04:50.08,en - 白色,,0,0,0,,Now we're going to take x
Dialogue: 0,0:04:48.99,0:04:50.08,zh - 黄色,,0,0,0,,现在我们要用 x
Dialogue: 0,0:04:50.27,0:04:55.36,en - 白色,,0,0,0,,and we're going to replace these bits here with the address as returned by this next call to new.
Dialogue: 0,0:04:50.27,0:04:55.36,zh - 黄色,,0,0,0,,我们将用下一次调用 new 所返回的地址来替换这些位
Dialogue: 0,0:04:55.86,0:04:57.78,en - 白色,,0,0,0,,So this is, again, array of size five,
Dialogue: 0,0:04:55.86,0:04:57.78,zh - 黄色,,0,0,0,,这又是大小为5的数组
Dialogue: 0,0:04:58.08,0:05:01.54,en - 白色,,0,0,0,,and now x gets the bits corresponding to the address of x.
Dialogue: 0,0:04:58.08,0:05:01.54,zh - 黄色,,0,0,0,,x 获得相对应的地址的位
Dialogue: 0,0:05:03.12,0:05:05.30,en - 白色,,0,0,0,,Next, we have y equals new int 3.
Dialogue: 0,0:05:03.12,0:05:05.30,zh - 黄色,,0,0,0,,接下来，y = new int[3]
Dialogue: 0,0:05:05.30,0:05:07.76,en - 白色,,0,0,0,,And so what that means is we're going to throw away these bits
Dialogue: 0,0:05:05.30,0:05:07.76,zh - 黄色,,0,0,0,,这意味着我们要扔掉这些位
Dialogue: 0,0:05:07.95,0:05:10.92,en - 白色,,0,0,0,,and replace them with the address of a new array of size three.
Dialogue: 0,0:05:07.95,0:05:10.92,zh - 黄色,,0,0,0,,并用大小为3的新数组的地址替换它们
Dialogue: 0,0:05:12.48,0:05:14.25,en - 白色,,0,0,0,,So there's a couple interesting things here.
Dialogue: 0,0:05:12.48,0:05:14.25,zh - 黄色,,0,0,0,,这里有几件有趣的事
Dialogue: 0,0:05:14.80,0:05:18.28,en - 白色,,0,0,0,,One of them is that the visualizer is going to make this disappear.
Dialogue: 0,0:05:14.80,0:05:18.28,zh - 黄色,,0,0,0,,其中之一就是 visualizer 会让这些东西消失
Dialogue: 0,0:05:19.02,0:05:19.90,en - 白色,,0,0,0,,So it's gone, right?
Dialogue: 0,0:05:19.02,0:05:19.90,zh - 黄色,,0,0,0,,不见了，对吧？
Dialogue: 0,0:05:19.90,0:05:21.31,en - 白色,,0,0,0,,And it kind of reorganizes for us.
Dialogue: 0,0:05:19.90,0:05:21.31,zh - 黄色,,0,0,0,,重组一下
Dialogue: 0,0:05:21.31,0:05:23.44,en - 白色,,0,0,0,,But the array that's one, two, three, four, five,
Dialogue: 0,0:05:21.31,0:05:23.44,zh - 黄色,,0,0,0,,数组是1，2，3，4，5
Dialogue: 0,0:05:23.44,0:05:25.00,en - 白色,,0,0,0,,it's just gone forever.
Dialogue: 0,0:05:23.44,0:05:25.00,zh - 黄色,,0,0,0,,一去不复返了
Dialogue: 0,0:05:25.39,0:05:26.30,en - 白色,,0,0,0,,We can never get it back.
Dialogue: 0,0:05:25.39,0:05:26.30,zh - 黄色,,0,0,0,,再也拿不回来了
Dialogue: 0,0:05:26.69,0:05:28.57,en - 白色,,0,0,0,,That's what I mean by an object is anonymous.
Dialogue: 0,0:05:26.69,0:05:28.57,zh - 黄色,,0,0,0,,这就是我所说的匿名对象
Dialogue: 0,0:05:28.57,0:05:29.48,en - 白色,,0,0,0,,We lose the reference.
Dialogue: 0,0:05:28.57,0:05:29.48,zh - 黄色,,0,0,0,,我们失去了引用
Dialogue: 0,0:05:29.48,0:05:30.20,en - 白色,,0,0,0,,That's just it.
Dialogue: 0,0:05:29.48,0:05:30.20,zh - 黄色,,0,0,0,,就这样了
Dialogue: 0,0:05:30.57,0:05:31.87,en - 白色,,0,0,0,,We'll never see that array again.
Dialogue: 0,0:05:30.57,0:05:31.87,zh - 黄色,,0,0,0,,我们再也见不到那个数组了
Dialogue: 0,0:05:32.46,0:05:33.37,en - 白色,,0,0,0,,Garbage collection.
Dialogue: 0,0:05:32.46,0:05:33.37,zh - 黄色,,0,0,0,,垃圾回收
Dialogue: 0,0:05:34.99,0:05:39.18,en - 白色,,0,0,0,,Next step, then, the other thing that was interesting is that we've got an array of size three.
Dialogue: 0,0:05:34.99,0:05:39.18,zh - 黄色,,0,0,0,,另一件有趣的事情是，我们得到了一个大小为3的数组
Dialogue: 0,0:05:39.18,0:05:40.26,en - 白色,,0,0,0,,In this case, it's all zeros.
Dialogue: 0,0:05:39.18,0:05:40.26,zh - 黄色,,0,0,0,,在这种情况下都是0
Dialogue: 0,0:05:40.89,0:05:41.58,en - 白色,,0,0,0,,Why zeros?
Dialogue: 0,0:05:40.89,0:05:41.58,zh - 黄色,,0,0,0,,为什么是0？
Dialogue: 0,0:05:41.58,0:05:43.80,en - 白色,,0,0,0,,Well, in Java, when you create an array,
Dialogue: 0,0:05:41.58,0:05:43.80,zh - 黄色,,0,0,0,,在 Java 中，当你创建一个数组时
Dialogue: 0,0:05:43.80,0:05:45.00,en - 白色,,0,0,0,,you always get default values.
Dialogue: 0,0:05:43.80,0:05:45.00,zh - 黄色,,0,0,0,,始终会获得默认值
Dialogue: 0,0:05:45.00,0:05:47.99,en - 白色,,0,0,0,,Much like how with a class, as we saw before,
Dialogue: 0,0:05:45.00,0:05:47.99,zh - 黄色,,0,0,0,,就像之前课上的一样
Dialogue: 0,0:05:47.99,0:05:50.55,en - 白色,,0,0,0,,you get a bunch of default values for every instance variable.
Dialogue: 0,0:05:47.99,0:05:50.55,zh - 黄色,,0,0,0,,每个实例变量都会得到默认值
Dialogue: 0,0:05:50.85,0:05:53.34,en - 白色,,0,0,0,,So these are my default values, which for an integer is zero.
Dialogue: 0,0:05:50.85,0:05:53.34,zh - 黄色,,0,0,0,,这些是我的默认值，整数的默认值是0
Dialogue: 0,0:05:54.33,0:05:55.45,en - 白色,,0,0,0,,This is just for fun.
Dialogue: 0,0:05:54.33,0:05:55.45,zh - 黄色,,0,0,0,,很有趣
Dialogue: 0,0:05:55.89,0:05:58.49,en - 白色,,0,0,0,,So when I run this line, I get an array of size zero,
Dialogue: 0,0:05:55.89,0:05:58.49,zh - 黄色,,0,0,0,,运行这行得到一个大小为0的数组
Dialogue: 0,0:05:58.68,0:06:02.60,en - 白色,,0,0,0,,so there are no boxes and an int, presumably, that says zero somewhere.
Dialogue: 0,0:05:58.68,0:06:02.60,zh - 黄色,,0,0,0,,所以没有盒子和整数，估计某处为0
Dialogue: 0,0:06:03.32,0:06:04.80,en - 白色,,0,0,0,,And so it just points at this thing.
Dialogue: 0,0:06:03.32,0:06:04.80,zh - 黄色,,0,0,0,,它只是指向这个东西
Dialogue: 0,0:06:06.33,0:06:08.48,en - 白色,,0,0,0,,If I want to get the length of an array,
Dialogue: 0,0:06:06.33,0:06:08.48,zh - 黄色,,0,0,0,,如果我想要获取数组的长度
Dialogue: 0,0:06:08.97,0:06:10.34,en - 白色,,0,0,0,,I can actually use dot length.
Dialogue: 0,0:06:08.97,0:06:10.34,zh - 黄色,,0,0,0,,实际上可以使用 .length
Dialogue: 0,0:06:10.59,0:06:13.38,en - 白色,,0,0,0,,So you can think of it as an array is like a class,
Dialogue: 0,0:06:10.59,0:06:13.38,zh - 黄色,,0,0,0,,把一个数组想象成一个类
Dialogue: 0,0:06:13.38,0:06:17.69,en - 白色,,0,0,0,,in a way, that has an instance variable, kind of, that is called length.
Dialogue: 0,0:06:13.38,0:06:17.69,zh - 黄色,,0,0,0,,它有一个叫 length 的实例变量
Dialogue: 0,0:06:18.30,0:06:21.59,en - 白色,,0,0,0,,And so when I say int xl equals x.length, it accesses this--
Dialogue: 0,0:06:18.30,0:06:21.59,zh - 黄色,,0,0,0,,int xL = x.length，它访问...
Dialogue: 0,0:06:21.76,0:06:22.76,en - 白色,,0,0,0,,let's see. Yeah, this is x.
Dialogue: 0,0:06:21.76,0:06:22.76,zh - 黄色,,0,0,0,,访问 x
Dialogue: 0,0:06:22.76,0:06:25.08,en - 白色,,0,0,0,,It accesses the secret five we cannot see,
Dialogue: 0,0:06:22.76,0:06:25.08,zh - 黄色,,0,0,0,,它进入我们看不到的5
Dialogue: 0,0:06:25.75,0:06:26.74,en - 白色,,0,0,0,,and it copies those bits.
Dialogue: 0,0:06:25.75,0:06:26.74,zh - 黄色,,0,0,0,,复制这些位
Dialogue: 0,0:06:27.38,0:06:28.60,en - 白色,,0,0,0,,So it had a five up here.
Dialogue: 0,0:06:27.38,0:06:28.60,zh - 黄色,,0,0,0,,这上面有5
Dialogue: 0,0:06:28.60,0:06:29.20,en - 白色,,0,0,0,,We copy them.
Dialogue: 0,0:06:28.60,0:06:29.20,zh - 黄色,,0,0,0,,复制它
Dialogue: 0,0:06:29.20,0:06:30.16,en - 白色,,0,0,0,,We had a five.
Dialogue: 0,0:06:29.20,0:06:30.16,zh - 黄色,,0,0,0,,得到5
Dialogue: 0,0:06:32.71,0:06:34.77,en - 白色,,0,0,0,,Now, we have creating a string array.
Dialogue: 0,0:06:32.71,0:06:34.77,zh - 黄色,,0,0,0,,现在我们创建了一个字符串数组
Dialogue: 0,0:06:35.21,0:06:36.73,en - 白色,,0,0,0,,So a challenge for you to ponder,
Dialogue: 0,0:06:35.21,0:06:36.73,zh - 黄色,,0,0,0,,一个需要深思熟虑的挑战是
Dialogue: 0,0:06:37.13,0:06:38.42,en - 白色,,0,0,0,,how many boxes get made?
Dialogue: 0,0:06:37.13,0:06:38.42,zh - 黄色,,0,0,0,,制作了多少盒子？
Dialogue: 0,0:06:38.42,0:06:39.92,en - 白色,,0,0,0,,OK, that one's probably pretty easy.
Dialogue: 0,0:06:38.42,0:06:39.92,zh - 黄色,,0,0,0,,也许很简单
Dialogue: 0,0:06:39.92,0:06:41.77,en - 白色,,0,0,0,,And how many bits are in each box?
Dialogue: 0,0:06:39.92,0:06:41.77,zh - 黄色,,0,0,0,,那么每个盒子里有多少位？
Dialogue: 0,0:06:41.93,0:06:42.49,en - 白色,,0,0,0,,Zero?
Dialogue: 0,0:06:41.93,0:06:42.49,zh - 黄色,,0,0,0,,0？
Dialogue: 0,0:06:42.72,0:06:43.76,en - 白色,,0,0,0,,There's no strings here.
Dialogue: 0,0:06:42.72,0:06:43.76,zh - 黄色,,0,0,0,,这里没有字符串
Dialogue: 0,0:06:43.76,0:06:44.68,en - 白色,,0,0,0,,What do you think?
Dialogue: 0,0:06:43.76,0:06:44.68,zh - 黄色,,0,0,0,,你觉得呢？
Dialogue: 0,0:06:45.18,0:06:47.81,en - 白色,,0,0,0,,And you might try and guess what the default value will be.
Dialogue: 0,0:06:45.18,0:06:47.81,zh - 黄色,,0,0,0,,你可能会尝试猜测默认值是什么
Dialogue: 0,0:06:47.81,0:06:49.38,en - 白色,,0,0,0,,Well, I'll spoil it for you.
Dialogue: 0,0:06:47.81,0:06:49.38,zh - 黄色,,0,0,0,,我来给你扫兴
Dialogue: 0,0:06:49.85,0:06:52.44,en - 白色,,0,0,0,,What you get is six boxes, and each one's 64 bits.
Dialogue: 0,0:06:49.85,0:06:52.44,zh - 黄色,,0,0,0,,你得到的是6个盒子，每个盒子64位
Dialogue: 0,0:06:52.64,0:06:53.82,en - 白色,,0,0,0,,And each one can hold what?
Dialogue: 0,0:06:52.64,0:06:53.82,zh - 黄色,,0,0,0,,每个装什么呢？
Dialogue: 0,0:06:54.50,0:06:57.08,en - 白色,,0,0,0,,I want you to answer that question yourself awkwardly.
Dialogue: 0,0:06:54.50,0:06:57.08,zh - 黄色,,0,0,0,,我要你自己笨拙地回答这个问题
Dialogue: 0,0:06:57.08,0:06:58.52,en - 白色,,0,0,0,,I don't care if your roommate's watching you,
Dialogue: 0,0:06:57.08,0:06:58.52,zh - 黄色,,0,0,0,,我不在乎你的室友是否在看着你
Dialogue: 0,0:06:58.52,0:06:59.69,en - 白色,,0,0,0,,whatever, and you have ear buds in.
Dialogue: 0,0:06:58.52,0:06:59.69,zh - 黄色,,0,0,0,,管他呢，你还戴着耳塞
Dialogue: 0,0:06:59.69,0:07:01.02,en - 白色,,0,0,0,,You're just going to say out loud your answer,
Dialogue: 0,0:06:59.69,0:07:01.02,zh - 黄色,,0,0,0,,你只要大声说出答案
Dialogue: 0,0:07:01.02,0:07:01.96,en - 白色,,0,0,0,,and they'll think you're weird.
Dialogue: 0,0:07:01.02,0:07:01.96,zh - 黄色,,0,0,0,,他们会觉得你很怪异
Dialogue: 0,0:07:02.45,0:07:03.33,en - 白色,,0,0,0,,OK, string references.
Dialogue: 0,0:07:02.45,0:07:03.33,zh - 黄色,,0,0,0,,字符串引用
Dialogue: 0,0:07:03.44,0:07:05.87,en - 白色,,0,0,0,,That's correct or not correct, depending on what you said.
Dialogue: 0,0:07:03.44,0:07:05.87,zh - 黄色,,0,0,0,,正确与否取决于你说了什么
Dialogue: 0,0:07:06.44,0:07:09.57,en - 白色,,0,0,0,,So what we've got here now is six boxes, 64 bits each.
Dialogue: 0,0:07:06.44,0:07:09.57,zh - 黄色,,0,0,0,,我们现在有6个盒子，每个盒子64位
Dialogue: 0,0:07:09.57,0:07:13.25,en - 白色,,0,0,0,,They hold string references, and the default value is all zeros, which is null.
Dialogue: 0,0:07:09.57,0:07:13.25,zh - 黄色,,0,0,0,,它们保存字符串引用，默认值为全0，即 null
Dialogue: 0,0:07:14.45,0:07:16.30,en - 白色,,0,0,0,,So then we go to the box and we say--
Dialogue: 0,0:07:14.45,0:07:16.30,zh - 黄色,,0,0,0,,我们来到盒子
Dialogue: 0,0:07:16.30,0:07:18.26,en - 白色,,0,0,0,,or we going to box four of this array.
Dialogue: 0,0:07:16.30,0:07:18.26,zh - 黄色,,0,0,0,,我们来到4号盒子
Dialogue: 0,0:07:18.92,0:07:20.84,en - 白色,,0,0,0,,So s points at this whole thing.
Dialogue: 0,0:07:18.92,0:07:20.84,zh - 黄色,,0,0,0,,这就是整件事的关键
Dialogue: 0,0:07:20.84,0:07:25.25,en - 白色,,0,0,0,,We say go four slots over, and now we're waiting and looking at the 64 bits.
Dialogue: 0,0:07:20.84,0:07:25.25,zh - 黄色,,0,0,0,,我们来到4号槽， 等待并查看64位
Dialogue: 0,0:07:25.49,0:07:26.84,en - 白色,,0,0,0,,We're going to assign them to ketchup.
Dialogue: 0,0:07:25.49,0:07:26.84,zh - 黄色,,0,0,0,,我们要把它分派给 ketchup
Dialogue: 0,0:07:27.34,0:07:28.28,en - 白色,,0,0,0,,What is ketchup?
Dialogue: 0,0:07:27.34,0:07:28.28,zh - 黄色,,0,0,0,,ketchup 是什么？
Dialogue: 0,0:07:28.85,0:07:33.12,en - 白色,,0,0,0,,Well, we saw before that we can instantiate strings with quotes,
Dialogue: 0,0:07:28.85,0:07:33.12,zh - 黄色,,0,0,0,,前面看到过，我们可以用引号实例化字符串
Dialogue: 0,0:07:33.57,0:07:37.14,en - 白色,,0,0,0,,so in this case, we basically call new secretly without seeing it.
Dialogue: 0,0:07:33.57,0:07:37.14,zh - 黄色,,0,0,0,,这种情况下，我们基本上是在看不到的地方调用 new
Dialogue: 0,0:07:38.85,0:07:41.30,en - 白色,,0,0,0,,So what that will do is a new string is created,
Dialogue: 0,0:07:38.85,0:07:41.30,zh - 黄色,,0,0,0,,这将会创建一个新的字符串
Dialogue: 0,0:07:41.30,0:07:43.38,en - 白色,,0,0,0,,its address is returned, and arrow points at it.
Dialogue: 0,0:07:41.30,0:07:43.38,zh - 黄色,,0,0,0,,返回它的地址，并且箭头指向它
Dialogue: 0,0:07:44.98,0:07:45.95,en - 白色,,0,0,0,,How about this line?
Dialogue: 0,0:07:44.98,0:07:45.95,zh - 黄色,,0,0,0,,这行呢？
Dialogue: 0,0:07:46.49,0:07:50.52,en - 白色,,0,0,0,,So I think that if you came from 61A, 61S, or, really, any programming course,
Dialogue: 0,0:07:46.49,0:07:50.52,zh - 黄色,,0,0,0,,如果你来自61A、61S 或者任何编程课程
Dialogue: 0,0:07:50.63,0:07:52.64,en - 白色,,0,0,0,,this, I hope, you can figure out.
Dialogue: 0,0:07:50.63,0:07:52.64,zh - 黄色,,0,0,0,,我希望你能弄清楚
Dialogue: 0,0:07:53.03,0:07:55.07,en - 白色,,0,0,0,,So try and figure out what's going to happen from this one.
Dialogue: 0,0:07:53.03,0:07:55.07,zh - 黄色,,0,0,0,,试着弄清楚这一次会发生什么
Dialogue: 0,0:07:56.51,0:07:59.42,en - 白色,,0,0,0,,So Java, what it will do is this is not a value.
Dialogue: 0,0:07:56.51,0:07:59.42,zh - 黄色,,0,0,0,,Java 它要做的是，这不是一个值
Dialogue: 0,0:07:59.84,0:08:01.74,en - 白色,,0,0,0,,It's going to evaluate each of these things.
Dialogue: 0,0:07:59.84,0:08:01.74,zh - 黄色,,0,0,0,,它将评估每个东西
Dialogue: 0,0:08:01.74,0:08:03.64,en - 白色,,0,0,0,,It needs to compute this difference.
Dialogue: 0,0:08:01.74,0:08:03.64,zh - 黄色,,0,0,0,,需要计算这个差值
Dialogue: 0,0:08:04.17,0:08:05.51,en - 白色,,0,0,0,,So it's first going to go to x3.
Dialogue: 0,0:08:04.17,0:08:05.51,zh - 黄色,,0,0,0,,所以首先要转到 x3
Dialogue: 0,0:08:05.51,0:08:07.35,en - 白色,,0,0,0,,Do, do, do, do, four.
Dialogue: 0,0:08:05.51,0:08:07.35,zh - 黄色,,0,0,0,,4
Dialogue: 0,0:08:07.98,0:08:10.50,en - 白色,,0,0,0,,x1, do, do, two.
Dialogue: 0,0:08:07.98,0:08:10.50,zh - 黄色,,0,0,0,,x1 是 2
Dialogue: 0,0:08:10.67,0:08:12.52,en - 白色,,0,0,0,,Now, it's going to say 4 minus 2 is 2.
Dialogue: 0,0:08:10.67,0:08:12.52,zh - 黄色,,0,0,0,,现在4-2=2
Dialogue: 0,0:08:13.61,0:08:17.94,en - 白色,,0,0,0,,So it'll go to s2, and it'll set this equal to the address of a new string, muffins.
Dialogue: 0,0:08:13.61,0:08:17.94,zh - 黄色,,0,0,0,,因此它将转到s2，并将其设置为新字符串 muffins 的地址
Dialogue: 0,0:08:19.41,0:08:20.94,en - 白色,,0,0,0,,Next, we'll create an int array b.
Dialogue: 0,0:08:19.41,0:08:20.94,zh - 黄色,,0,0,0,,接下来创建一个整型数组 b
Dialogue: 0,0:08:20.94,0:08:22.27,en - 白色,,0,0,0,,That one's not very interesting.
Dialogue: 0,0:08:20.94,0:08:22.27,zh - 黄色,,0,0,0,,这个不是很有趣
Dialogue: 0,0:08:22.27,0:08:23.54,en - 白色,,0,0,0,,It's just the same as we've done before.
Dialogue: 0,0:08:22.27,0:08:23.54,zh - 黄色,,0,0,0,,和以前的一样
Dialogue: 0,0:08:24.01,0:08:25.64,en - 白色,,0,0,0,,But now we have this extra little call,
Dialogue: 0,0:08:24.01,0:08:25.64,zh - 黄色,,0,0,0,,但现在有一个额外的调用
Dialogue: 0,0:08:25.64,0:08:28.47,en - 白色,,0,0,0,,system.arraycopy, I'll be explaining in just a moment.
Dialogue: 0,0:08:25.64,0:08:28.47,zh - 黄色,,0,0,0,,System.arraycopy，我稍后会解释
Dialogue: 0,0:08:29.43,0:08:31.41,en - 白色,,0,0,0,,So what system.arraycopy does, though,
Dialogue: 0,0:08:29.43,0:08:31.41,zh - 黄色,,0,0,0,,System.arraycopy 的作用是
Dialogue: 0,0:08:31.74,0:08:34.80,en - 白色,,0,0,0,,is it copies from array b to array x.
Dialogue: 0,0:08:31.74,0:08:34.80,zh - 黄色,,0,0,0,,从数组 b 复制到数组 x
Dialogue: 0,0:08:35.41,0:08:37.52,en - 白色,,0,0,0,,And it starts at position zero of b,
Dialogue: 0,0:08:35.41,0:08:37.52,zh - 黄色,,0,0,0,,它从 b 的位置0开始
Dialogue: 0,0:08:38.03,0:08:40.94,en - 白色,,0,0,0,,and it copies to position three of x.
Dialogue: 0,0:08:38.03,0:08:40.94,zh - 黄色,,0,0,0,,复制到 x 的位置3
Dialogue: 0,0:08:41.08,0:08:43.08,en - 白色,,0,0,0,,And I find the syntax a little hard to remember.
Dialogue: 0,0:08:41.08,0:08:43.08,zh - 黄色,,0,0,0,,我觉得语法有点难记
Dialogue: 0,0:08:43.08,0:08:45.43,en - 白色,,0,0,0,,I always have to look it up every semester.
Dialogue: 0,0:08:43.08,0:08:45.43,zh - 黄色,,0,0,0,,每学期都要查一查
Dialogue: 0,0:08:45.43,0:08:48.06,en - 白色,,0,0,0,,But basically, it-- and it's going to copy two of those numbers.
Dialogue: 0,0:08:45.43,0:08:48.06,zh - 黄色,,0,0,0,,但基本上，它会复制其中的两个数字
Dialogue: 0,0:08:48.29,0:08:52.56,en - 白色,,0,0,0,,So in other words, starting from zero of b, going two slots over.
Dialogue: 0,0:08:48.29,0:08:52.56,zh - 黄色,,0,0,0,,换句话说，从b的0开始，移动两个槽
Dialogue: 0,0:08:52.85,0:08:54.00,en - 白色,,0,0,0,,These are the ones I want to copy.
Dialogue: 0,0:08:52.85,0:08:54.00,zh - 黄色,,0,0,0,,这些就是我想复制的
Dialogue: 0,0:08:54.42,0:08:57.10,en - 白色,,0,0,0,,I'm going to go to this location and copy them here.
Dialogue: 0,0:08:54.42,0:08:57.10,zh - 黄色,,0,0,0,,我要到这个地方，把它们复制到这里
Dialogue: 0,0:08:57.67,0:09:00.06,en - 白色,,0,0,0,,So after I run that, you'll see 9, 10 up here, up there.
Dialogue: 0,0:08:57.67,0:09:00.06,zh - 黄色,,0,0,0,,所以运行后，那里变成9和10
Dialogue: 0,0:09:01.46,0:09:03.33,en - 白色,,0,0,0,,So that's basic array code.
Dialogue: 0,0:09:01.46,0:09:03.33,zh - 黄色,,0,0,0,,这就是基本的数组代码
Dialogue: 0,0:09:04.82,0:09:06.75,en - 白色,,0,0,0,,Let's talk a little bit more about array copy.
Dialogue: 0,0:09:04.82,0:09:06.75,zh - 黄色,,0,0,0,,再多讨论一下数组的复制
Dialogue: 0,0:09:08.01,0:09:12.12,en - 白色,,0,0,0,,So, actually, the first question we ask ourselves is, why would we ever want to make a copy of an array?
Dialogue: 0,0:09:08.01,0:09:12.12,zh - 黄色,,0,0,0,,第一个问题，我们为什么要复制一个数组？
Dialogue: 0,0:09:13.09,0:09:15.35,en - 白色,,0,0,0,,Well, it's not enough just to say, for example,
Dialogue: 0,0:09:13.09,0:09:15.35,zh - 黄色,,0,0,0,,举个例子，光说是不够的
Dialogue: 0,0:09:15.35,0:09:16.64,en - 白色,,0,0,0,,y equals x, right?
Dialogue: 0,0:09:15.35,0:09:16.64,zh - 黄色,,0,0,0,,y = x 对吗？
Dialogue: 0,0:09:16.64,0:09:21.50,en - 白色,,0,0,0,,This just says I'm copying the address of an array from one variable to another.
Dialogue: 0,0:09:16.64,0:09:21.50,zh - 黄色,,0,0,0,,这只是说明我正在将数组的地址从一个变量复制到另一个变量
Dialogue: 0,0:09:21.50,0:09:23.51,en - 白色,,0,0,0,,This is two references to the same array.
Dialogue: 0,0:09:21.50,0:09:23.51,zh - 黄色,,0,0,0,,这是对同一数组的两个引用
Dialogue: 0,0:09:24.56,0:09:32.18,en - 白色,,0,0,0,,Similarly, suppose we're trying to write a nondestructive array function that takes an array and, say,
Dialogue: 0,0:09:24.56,0:09:32.18,zh - 黄色,,0,0,0,,类似地，假设我们试图编写一个非破坏性的数组函数，该函数接受一个数组
Dialogue: 0,0:09:32.18,0:09:33.55,en - 白色,,0,0,0,,squares each of its elements.
Dialogue: 0,0:09:32.18,0:09:33.55,zh - 黄色,,0,0,0,,每个元素取平方
Dialogue: 0,0:09:34.76,0:09:37.03,en - 白色,,0,0,0,,Whenever you give that function an array reference,
Dialogue: 0,0:09:34.76,0:09:37.03,zh - 黄色,,0,0,0,,当你为函数提供数据引用时
Dialogue: 0,0:09:37.19,0:09:40.10,en - 白色,,0,0,0,,it gets an actual reference to the original array.
Dialogue: 0,0:09:37.19,0:09:40.10,zh - 黄色,,0,0,0,,它获取对原始数组的实际引用
Dialogue: 0,0:09:40.46,0:09:44.31,en - 白色,,0,0,0,,So I have a main, financial tax software, da, da, da.
Dialogue: 0,0:09:40.46,0:09:44.31,zh - 黄色,,0,0,0,,假设我有一个财务税务软件 XXX
Dialogue: 0,0:09:44.53,0:09:47.22,en - 白色,,0,0,0,,I don't know why you're squaring numbers in tax software, but anyway.
Dialogue: 0,0:09:44.53,0:09:47.22,zh - 黄色,,0,0,0,,我不知道你为什么要在税务软件里做平方，但不管怎样
Dialogue: 0,0:09:47.60,0:09:51.83,en - 白色,,0,0,0,,I give my precious array, me, to someone else to go do squaring,
Dialogue: 0,0:09:47.60,0:09:51.83,zh - 黄色,,0,0,0,,我把我珍贵的数组，给别人去做平方
Dialogue: 0,0:09:51.83,0:09:53.73,en - 白色,,0,0,0,,and they claim to be doing it non-destructively.
Dialogue: 0,0:09:51.83,0:09:53.73,zh - 黄色,,0,0,0,,他们声称这样做是非破坏性的
Dialogue: 0,0:09:54.20,0:09:56.66,en - 白色,,0,0,0,,They better have some way to make a copy of an array,
Dialogue: 0,0:09:54.20,0:09:56.66,zh - 黄色,,0,0,0,,他们最好有办法复制一个数组
Dialogue: 0,0:09:56.66,0:09:58.07,en - 白色,,0,0,0,,otherwise they're breaking my array.
Dialogue: 0,0:09:56.66,0:09:58.07,zh - 黄色,,0,0,0,,否则会破坏我的数组
Dialogue: 0,0:09:59.12,0:10:01.20,en - 白色,,0,0,0,,Because if it says nondestructive, it better be that way.
Dialogue: 0,0:09:59.12,0:10:01.20,zh - 黄色,,0,0,0,,因为如果它说是非破坏性的，最好这样
Dialogue: 0,0:10:01.41,0:10:02.89,en - 白色,,0,0,0,,So there's two ways to make a copy.
Dialogue: 0,0:10:01.41,0:10:02.89,zh - 黄色,,0,0,0,,有两种方法可以复制
Dialogue: 0,0:10:03.47,0:10:05.03,en - 白色,,0,0,0,,One is do an item-by-item copy.
Dialogue: 0,0:10:03.47,0:10:05.03,zh - 黄色,,0,0,0,,一种是逐项复制
Dialogue: 0,0:10:05.03,0:10:05.79,en - 白色,,0,0,0,,Just write a loop.
Dialogue: 0,0:10:05.03,0:10:05.79,zh - 黄色,,0,0,0,,写个循环就行
Dialogue: 0,0:10:06.50,0:10:10.10,en - 白色,,0,0,0,,While i is less than x.length, y of i equals x of i.
Dialogue: 0,0:10:06.50,0:10:10.10,zh - 黄色,,0,0,0,,while (i < x.length)，y[i] = x[i]
Dialogue: 0,0:10:11.36,0:10:13.91,en - 白色,,0,0,0,,Now, the alternate approach is to use array copy.
Dialogue: 0,0:10:11.36,0:10:13.91,zh - 黄色,,0,0,0,,另一种方法是使用数组复制
Dialogue: 0,0:10:14.39,0:10:17.10,en - 白色,,0,0,0,,And this function takes five parameters.
Dialogue: 0,0:10:14.39,0:10:17.10,zh - 黄色,,0,0,0,,该函数接受5个参数
Dialogue: 0,0:10:17.64,0:10:28.75,en - 白色,,0,0,0,,So when I see system.arraycopy, it says copy from the array b starting at index zero to the destination array x, starting at x's position three.
Dialogue: 0,0:10:17.64,0:10:28.75,zh - 黄色,,0,0,0,,System.arraycopy 从数组 b 的0索引开始复制到目标数组 x 的3索引
Dialogue: 0,0:10:29.13,0:10:30.70,en - 白色,,0,0,0,,And by the way, copy two of those.
Dialogue: 0,0:10:29.13,0:10:30.70,zh - 黄色,,0,0,0,,复制两个
Dialogue: 0,0:10:31.44,0:10:33.68,en - 白色,,0,0,0,,So in slice notation, if you know Python,
Dialogue: 0,0:10:31.44,0:10:33.68,zh - 黄色,,0,0,0,,如果了解 Python，在切片表示中
Dialogue: 0,0:10:33.68,0:10:35.25,en - 白色,,0,0,0,,it would be something like this.
Dialogue: 0,0:10:33.68,0:10:35.25,zh - 黄色,,0,0,0,,应该这样
Dialogue: 0,0:10:35.91,0:10:37.58,en - 白色,,0,0,0,,And if you've never seen slice notation,
Dialogue: 0,0:10:35.91,0:10:37.58,zh - 黄色,,0,0,0,,如果你从未见过切片表示法
Dialogue: 0,0:10:37.58,0:10:38.69,en - 白色,,0,0,0,,do not worry about it.
Dialogue: 0,0:10:37.58,0:10:38.69,zh - 黄色,,0,0,0,,别担心
Dialogue: 0,0:10:40.01,0:10:43.20,en - 白色,,0,0,0,,So array copy, what's the advantage of using it versus a loop?
Dialogue: 0,0:10:40.01,0:10:43.20,zh - 黄色,,0,0,0,,数组复制与循环相比有什么优势呢？
Dialogue: 0,0:10:43.53,0:10:47.04,en - 白色,,0,0,0,,Well, it's probably going to be faster, particularly for large arrays,
Dialogue: 0,0:10:43.53,0:10:47.04,zh - 黄色,,0,0,0,,它可能会更快，特别是对于大型数组
Dialogue: 0,0:10:47.35,0:10:49.47,en - 白色,,0,0,0,,because Java interpreter is closer to the hardware.
Dialogue: 0,0:10:47.35,0:10:49.47,zh - 黄色,,0,0,0,,因为 Java 解释器更接近硬件
Dialogue: 0,0:10:49.47,0:10:55.14,en - 白色,,0,0,0,,So it can take advantage of knowledge about how things truly work that you, as a Java programmer, cannot.
Dialogue: 0,0:10:49.47,0:10:55.14,zh - 黄色,,0,0,0,,它可以利用相关事物真正运作的知识，而你作为一个 Java 程序员却不能
Dialogue: 0,0:10:56.87,0:10:59.13,en - 白色,,0,0,0,,The other reason is the code is a bit more compact,
Dialogue: 0,0:10:56.87,0:10:59.13,zh - 黄色,,0,0,0,,另一个原因是代码更紧凑
Dialogue: 0,0:10:59.60,0:11:01.35,en - 白色,,0,0,0,,and if somebody knows what this means,
Dialogue: 0,0:10:59.60,0:11:01.35,zh - 黄色,,0,0,0,,有的人知道这是什么意思
Dialogue: 0,0:11:01.64,0:11:03.45,en - 白色,,0,0,0,,it can be easier to read than looking at a loop.
Dialogue: 0,0:11:01.64,0:11:03.45,zh - 黄色,,0,0,0,,它可能比循环更易读
Dialogue: 0,0:11:03.86,0:11:06.19,en - 白色,,0,0,0,,But one could also argue it's harder to read,
Dialogue: 0,0:11:03.86,0:11:06.19,zh - 黄色,,0,0,0,,但也有人可能会争辩说，它更难读
Dialogue: 0,0:11:06.19,0:11:08.18,en - 白色,,0,0,0,,because you have to remember what all these parameters do.
Dialogue: 0,0:11:06.19,0:11:08.18,zh - 黄色,,0,0,0,,因为你必须记住所有参数的作用
Dialogue: 0,0:11:08.18,0:11:12.61,en - 白色,,0,0,0,,So I'll leave it to your judgment which you think seems easier to read.
Dialogue: 0,0:11:08.18,0:11:12.61,zh - 黄色,,0,0,0,,你自己判断哪个更易读
Dialogue: 0,0:11:09.61,0:11:12.61,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
