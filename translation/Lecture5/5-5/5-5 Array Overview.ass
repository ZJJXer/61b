[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 5-5 Array Overview.mp4
Video File: 5-5 Array Overview.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 96
Active Line: 102
Video Position: 9806

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:00.53,0:00:02.12,en - 白色,,0,0,0,,In the last few videos, we've seen
Dialogue: 0,0:00:00.53,0:00:02.12,zh - 黄色,,0,0,0,,在过去的几个视频中
Dialogue: 0,0:00:02.12,0:00:09.04,en - 白色,,0,0,0,,how we can use a really clever set of recursive class definitions to build an infinitely extensible list.
Dialogue: 0,0:00:02.12,0:00:09.04,zh - 黄色,,0,0,0,,我们知道如何用一套非常巧妙的递归类定义来建立一个无限扩容的链表
Dialogue: 0,0:00:09.38,0:00:10.79,en - 白色,,0,0,0,,So for example, the SLList--
Dialogue: 0,0:00:09.38,0:00:10.79,zh - 黄色,,0,0,0,,比如 SLList
Dialogue: 0,0:00:11.18,0:00:14.81,en - 白色,,0,0,0,,with SLList, we can do addLast over and over and over until we get bored of it
Dialogue: 0,0:00:11.18,0:00:14.81,zh - 黄色,,0,0,0,,有了 SLList，我们可以执行 addLast 到厌倦为止
Dialogue: 0,0:00:14.81,0:00:16.47,en - 白色,,0,0,0,,or I guess our computer runs out of memory.
Dialogue: 0,0:00:14.81,0:00:16.47,zh - 黄色,,0,0,0,,或者电脑内存不足
Dialogue: 0,0:00:16.61,0:00:20.05,en - 白色,,0,0,0,,But as a theoretical construct, the SLList can grow forever.
Dialogue: 0,0:00:16.61,0:00:20.05,zh - 黄色,,0,0,0,,作为一个理论结构，SLList 可以永远增长
Dialogue: 0,0:00:20.84,0:00:25.13,en - 白色,,0,0,0,,Now, in this next set of videos, what we're going to do is ultimately build an AList--
Dialogue: 0,0:00:20.84,0:00:25.13,zh - 黄色,,0,0,0,,在下一组视频中，我们要最终建立一个 AList
Dialogue: 0,0:00:25.13,0:00:29.71,en - 白色,,0,0,0,,and array-based list that uses a totally orthogonal way of storing information.
Dialogue: 0,0:00:25.13,0:00:29.71,zh - 黄色,,0,0,0,,是基于数组的链表，使用完全正交的方式来存储信息
Dialogue: 0,0:00:29.95,0:00:34.40,en - 白色,,0,0,0,,In particular, it will use arrays rather than a recursive list structure.
Dialogue: 0,0:00:29.95,0:00:34.40,zh - 黄色,,0,0,0,,特别是，它将使用数组而不是递归结构
Dialogue: 0,0:00:35.46,0:00:38.68,en - 白色,,0,0,0,,So let's start by just thinking back about how memory works,
Dialogue: 0,0:00:35.46,0:00:38.68,zh - 黄色,,0,0,0,,让我们先来回顾一下内存是如何工作的
Dialogue: 0,0:00:39.62,0:00:41.42,en - 白色,,0,0,0,,So in general, if we need to build a list--
Dialogue: 0,0:00:39.62,0:00:41.42,zh - 黄色,,0,0,0,,一般说来，如果需要构建一个 List
Dialogue: 0,0:00:41.42,0:00:43.58,en - 白色,,0,0,0,,if we want to, say, have a list of a million items--
Dialogue: 0,0:00:41.42,0:00:43.58,zh - 黄色,,0,0,0,,比方说一百万个项的 List
Dialogue: 0,0:00:43.79,0:00:45.20,en - 白色,,0,0,0,,we need a million memory boxes.
Dialogue: 0,0:00:43.79,0:00:45.20,zh - 黄色,,0,0,0,,我们需要一百万个内存盒子
Dialogue: 0,0:00:45.59,0:00:48.95,en - 白色,,0,0,0,,And we've talked about different ways that you can get memory boxes in Java.
Dialogue: 0,0:00:45.59,0:00:48.95,zh - 黄色,,0,0,0,,我们已经讨论了在 Java 中获取内存盒子的不同方式
Dialogue: 0,0:00:49.46,0:00:51.20,en - 白色,,0,0,0,,One of them is to declare a variable.
Dialogue: 0,0:00:49.46,0:00:51.20,zh - 黄色,,0,0,0,,其中之一是声明变量
Dialogue: 0,0:00:51.48,0:00:53.09,en - 白色,,0,0,0,,So for example, if I say int x,
Dialogue: 0,0:00:51.48,0:00:53.09,zh - 黄色,,0,0,0,,例如 int x
Dialogue: 0,0:00:53.34,0:00:55.72,en - 白色,,0,0,0,,Java goes, gets me 32 bits of memory,
Dialogue: 0,0:00:53.34,0:00:55.72,zh - 黄色,,0,0,0,,Java 会分配32位内存
Dialogue: 0,0:00:55.88,0:00:57.43,en - 白色,,0,0,0,,set them aside as a little box for us,
Dialogue: 0,0:00:55.88,0:00:57.43,zh - 黄色,,0,0,0,,把它们放在一边，作为小盒子
Dialogue: 0,0:00:57.69,0:00:59.43,en - 白色,,0,0,0,,and then we can store integers in that box.
Dialogue: 0,0:00:57.69,0:00:59.43,zh - 黄色,,0,0,0,,然后可以把整数存储在盒子里
Dialogue: 0,0:01:00.17,0:01:01.73,en - 白色,,0,0,0,,If we say Walrus w1,
Dialogue: 0,0:01:00.17,0:01:01.73,zh - 黄色,,0,0,0,,如果 Walrus w1
Dialogue: 0,0:01:02.08,0:01:06.56,en - 白色,,0,0,0,,then it gives us a memory box of 64 bits that can store the location of a walrus.
Dialogue: 0,0:01:02.08,0:01:06.56,zh - 黄色,,0,0,0,,那么它给了我们一个64位的内存盒子，可以存储海象的位置
Dialogue: 0,0:01:07.34,0:01:10.31,en - 白色,,0,0,0,,And if we say walrus w2 equals new Walrus,
Dialogue: 0,0:01:07.34,0:01:10.31,zh - 黄色,,0,0,0,,如果 Walrus w2 = new Walrus
Dialogue: 0,0:01:10.48,0:01:12.53,en - 白色,,0,0,0,,in this case, a bunch of different stuff happens.
Dialogue: 0,0:01:10.48,0:01:12.53,zh - 黄色,,0,0,0,,在这种情况下，会发生很多不同的事情
Dialogue: 0,0:01:12.53,0:01:18.55,en - 白色,,0,0,0,,But ultimately what happens is that we get 32 bits to store the size of the Walrus, 64 bits for the tusk size,
Dialogue: 0,0:01:12.53,0:01:18.55,zh - 黄色,,0,0,0,,但最终会用32位来存储海象，64位来存储象牙
Dialogue: 0,0:01:18.83,0:01:22.80,en - 白色,,0,0,0,,and we also get 64 bits over here to store the reference to this Walrus.
Dialogue: 0,0:01:18.83,0:01:22.80,zh - 黄色,,0,0,0,,还有64位来存储对这个海象的引用
Dialogue: 0,0:01:23.66,0:01:26.08,en - 白色,,0,0,0,,So these are all different ways of getting memory boxes.
Dialogue: 0,0:01:23.66,0:01:26.08,zh - 黄色,,0,0,0,,这些都是获取内存盒子的不同方式
Dialogue: 0,0:01:26.08,0:01:31.68,en - 白色,,0,0,0,,We've taken advantage of this idea here in order to build SLLists or DLLists.
Dialogue: 0,0:01:26.08,0:01:31.68,zh - 黄色,,0,0,0,,我们利用了这个想法构建了 SLList 和 DLList
Dialogue: 0,0:01:31.91,0:01:33.92,en - 白色,,0,0,0,,And so what we're going to do next is use arrays.
Dialogue: 0,0:01:31.91,0:01:33.92,zh - 黄色,,0,0,0,,下一步要使用数组
Dialogue: 0,0:01:34.49,0:01:35.72,en - 白色,,0,0,0,,So what are arrays, really?
Dialogue: 0,0:01:34.49,0:01:35.72,zh - 黄色,,0,0,0,,那么到底什么是数组？
Dialogue: 0,0:01:35.72,0:01:38.16,en - 白色,,0,0,0,,I mean, you've used them in homework 0 and in project 0.
Dialogue: 0,0:01:35.72,0:01:38.16,zh - 黄色,,0,0,0,,你在作业0和项目0中都用过它们
Dialogue: 0,0:01:38.56,0:01:41.53,en - 白色,,0,0,0,,But the most crisp way of thinking about an array
Dialogue: 0,0:01:38.56,0:01:41.53,zh - 黄色,,0,0,0,,但是对于数组最清晰的思考方式是
Dialogue: 0,0:01:41.75,0:01:44.71,en - 白色,,0,0,0,,is to think of it as a numbered sequence of memory boxes.
Dialogue: 0,0:01:41.75,0:01:44.71,zh - 黄色,,0,0,0,,把它看成是一个有编号的内存盒子序列
Dialogue: 0,0:01:45.14,0:01:48.63,en - 白色,,0,0,0,,So just like a class is a named set of memory boxes,
Dialogue: 0,0:01:45.14,0:01:48.63,zh - 黄色,,0,0,0,,就像类是一组命名的内存盒子一样
Dialogue: 0,0:01:48.86,0:01:50.56,en - 白色,,0,0,0,,arrays will be a numbered sequence.
Dialogue: 0,0:01:48.86,0:01:50.56,zh - 黄色,,0,0,0,,数组是编号序列
Dialogue: 0,0:01:50.96,0:01:54.33,en - 白色,,0,0,0,,And what I mean by a named set is-- for example, Walrus.
Dialogue: 0,0:01:50.96,0:01:54.33,zh - 黄色,,0,0,0,,我所说的命名是指...例如海象
Dialogue: 0,0:01:54.33,0:02:00.72,en - 白色,,0,0,0,,It has a size which you access using dot notation-- w.size or w.tuskSize.
Dialogue: 0,0:01:54.33,0:02:00.72,zh - 黄色,,0,0,0,,它的 size 可以使用点表示法访问...w.size 或 w.tuskSize
Dialogue: 0,0:02:00.95,0:02:02.98,en - 白色,,0,0,0,,With arrays, we use this bracket notation.
Dialogue: 0,0:02:00.95,0:02:02.98,zh - 黄色,,0,0,0,,对于数组，我们使用方括号表示法
Dialogue: 0,0:02:03.39,0:02:05.27,en - 白色,,0,0,0,,So if I want the third item of the array--
Dialogue: 0,0:02:03.39,0:02:05.27,zh - 黄色,,0,0,0,,如果我想要数组的第三项
Dialogue: 0,0:02:05.27,0:02:08.52,en - 白色,,0,0,0,,that's called A, let's say-- we'll do A bracket 3.
Dialogue: 0,0:02:05.27,0:02:08.52,zh - 黄色,,0,0,0,,比方说数组叫 A，即 A[3]
Dialogue: 0,0:02:09.41,0:02:12.40,en - 白色,,0,0,0,,So in a sense, they have a lot of similarities with classes.
Dialogue: 0,0:02:09.41,0:02:12.40,zh - 黄色,,0,0,0,,从某种意义上说 它们与类有很多相似之处
Dialogue: 0,0:02:13.61,0:02:18.02,en - 白色,,0,0,0,,Now, if we want to really be very specific about what an array is,
Dialogue: 0,0:02:13.61,0:02:18.02,zh - 黄色,,0,0,0,,如果我们真想具体地了解什么是数组
Dialogue: 0,0:02:18.02,0:02:21.03,en - 白色,,0,0,0,,it's not just that sequence of memory boxes, but it will also have a length.
Dialogue: 0,0:02:18.02,0:02:21.03,zh - 黄色,,0,0,0,,它不仅是内存盒子序列，还有一个长度
Dialogue: 0,0:02:21.50,0:02:23.12,en - 白色,,0,0,0,,So in terms of what you can do with it in Java,
Dialogue: 0,0:02:21.50,0:02:23.12,zh - 黄色,,0,0,0,,你在 Java 中能做的是
Dialogue: 0,0:02:23.12,0:02:26.27,en - 白色,,0,0,0,,you can ask it for its length or you can get these sequence of memory boxes.
Dialogue: 0,0:02:23.12,0:02:26.27,zh - 黄色,,0,0,0,,访问长度或得到内存盒子序列
Dialogue: 0,0:02:26.72,0:02:31.04,en - 白色,,0,0,0,,Now, an important thing is that the number of memory boxes is always going to match that length.
Dialogue: 0,0:02:26.72,0:02:31.04,zh - 黄色,,0,0,0,,现在的重点是内存盒子的数量总是与长度相匹配
Dialogue: 0,0:02:31.04,0:02:32.01,en - 白色,,0,0,0,,I mean, that makes sense.
Dialogue: 0,0:02:31.04,0:02:32.01,zh - 黄色,,0,0,0,,这说得通
Dialogue: 0,0:02:32.57,0:02:34.84,en - 白色,,0,0,0,,And we also are going to have a very special rule,
Dialogue: 0,0:02:32.57,0:02:34.84,zh - 黄色,,0,0,0,,我们还有一个非常特殊的规则
Dialogue: 0,0:02:35.01,0:02:37.20,en - 白色,,0,0,0,,which is that all the boxes have to be the same type.
Dialogue: 0,0:02:35.01,0:02:37.20,zh - 黄色,,0,0,0,,即所有的盒子都必须是同一类型的
Dialogue: 0,0:02:37.55,0:02:39.68,en - 白色,,0,0,0,,And that's unlike other languages like Python,
Dialogue: 0,0:02:37.55,0:02:39.68,zh - 黄色,,0,0,0,,这与 Python 等其他语言不同
Dialogue: 0,0:02:39.68,0:02:43.19,en - 白色,,0,0,0,,where the built-in list type can include different things of different types.
Dialogue: 0,0:02:39.68,0:02:43.19,zh - 黄色,,0,0,0,,它们内置列表类型可以包括不同类型的不同事物
Dialogue: 0,0:02:43.43,0:02:46.31,en - 白色,,0,0,0,,In Java, all of those boxes must be the same type,
Dialogue: 0,0:02:43.43,0:02:46.31,zh - 黄色,,0,0,0,,在 Java 中，所有盒子必须是相同类型的
Dialogue: 0,0:02:46.31,0:02:47.89,en - 白色,,0,0,0,,and thus, the same number of bits.
Dialogue: 0,0:02:46.31,0:02:47.89,zh - 黄色,,0,0,0,,因此位数相同
Dialogue: 0,0:02:48.47,0:02:53.19,en - 白色,,0,0,0,,And just as an aside, those boxes will always be numbered from 0 to length minus 1.
Dialogue: 0,0:02:48.47,0:02:53.19,zh - 黄色,,0,0,0,,顺便说一句，这些盒子的编号总是从0到 length-1
Dialogue: 0,0:02:53.64,0:02:57.55,en - 白色,,0,0,0,,Now, just like a class, I'll make a note that whenever you instantiate an array,
Dialogue: 0,0:02:53.64,0:02:57.55,zh - 黄色,,0,0,0,,就像类一样，每当你实例化一个数组时
Dialogue: 0,0:02:58.01,0:03:01.10,en - 白色,,0,0,0,,what will happen is you get one reference at the time it's created.
Dialogue: 0,0:02:58.01,0:03:01.10,zh - 黄色,,0,0,0,,在创建它的时候会得到一个引用
Dialogue: 0,0:03:02.39,0:03:06.02,en - 白色,,0,0,0,,And if it is the case that you throw away your only reference to that array,
Dialogue: 0,0:03:02.39,0:03:06.02,zh - 黄色,,0,0,0,,如果你丢弃了对该数组的唯一引用
Dialogue: 0,0:03:06.24,0:03:08.11,en - 白色,,0,0,0,,just like any old regular object,
Dialogue: 0,0:03:06.24,0:03:08.11,zh - 黄色,,0,0,0,,就像任何旧的对象
Dialogue: 0,0:03:09.12,0:03:12.74,en - 白色,,0,0,0,,you will-- or any class instance-- you will never be able to get it back.
Dialogue: 0,0:03:09.12,0:03:12.74,zh - 黄色,,0,0,0,,你将永远无法取回它
Dialogue: 0,0:03:12.95,0:03:15.51,en - 白色,,0,0,0,,The garbage collector will eat it up, and that's it.
Dialogue: 0,0:03:12.95,0:03:15.51,zh - 黄色,,0,0,0,,垃圾收集器会吃掉它，就是这样
Dialogue: 0,0:03:16.55,0:03:19.53,en - 白色,,0,0,0,,Now, unlike classes, arrays will never have methods.
Dialogue: 0,0:03:16.55,0:03:19.53,zh - 黄色,,0,0,0,,与类不同，数组永远不会有方法
Dialogue: 0,0:03:19.53,0:03:20.78,en - 白色,,0,0,0,,They're just going to be data.
Dialogue: 0,0:03:19.53,0:03:20.78,zh - 黄色,,0,0,0,,它们只会有数据
Dialogue: 0,0:03:20.78,0:03:24.73,en - 白色,,0,0,0,,There's going to be a link and a sequence of numbered memory boxes.
Dialogue: 0,0:03:20.78,0:03:24.73,zh - 黄色,,0,0,0,,会有一个链接和一系列编号的内存盒子
Dialogue: 0,0:03:21.73,0:03:24.73,翻译人员专属 - 片尾（左上角）,,0,0,0,, 翻译：@隐秀_（seriouszyx）
